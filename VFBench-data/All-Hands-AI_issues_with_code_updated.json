[
  {
    "id": 2975016370,
    "number": 7723,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/7723",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/8106",
    "type": "issue",
    "labels": "enhancement,openhands",
    "created_date": "2025-04-06 15:15:51",
    "updated_date": "2025-05-15 05:24:43",
    "resolved_date": "2025-05-15 05:24:43",
    "title": "Better mechanism for waiting for a long time",
    "body": "**What problem or use case are you trying to solve?**\n\nCurrently, with the tmux implementation, there is no way for the agent to sleep for a long time.\n\nFor instance, when the agent tried to sleep for 90 seconds, it kept sending empty commands to wait for longer, but it eventually did it so long it got stuck in a loop.\n\n<img width=\"365\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b7c8a5ad-488b-4e5a-9af3-52f9fb0e09a5\" />\n\n**Describe the UX of the solution you'd like**\n\nIt would be good for the agent to be able to wait for a longer time when a command is expected to take a long time.\n\n**Do you have thoughts on the technical implementation?**\n\nWe can provide the agent with an additional action that is `WaitAction(seconds: int)`, similar to `CmdRunAction()` that allows the agent to wait for a certain amount of time.\n\nThe WaitAction would simply cause the action executor to wait that many seconds before asking the agent for input again.\n\n### If you find this feature request or enhancement useful, make sure to add a üëç to the issue",
    "state": "closed",
    "comments": 5,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/7723/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/7723/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/7723/events",
    "user_login": "neubig",
    "user_url": "https://github.com/neubig",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 8106,
    "pr_source": "search_api",
    "commits": [
      "603bb8084edc56b1628552df86b76369f7d6d9ac",
      "d933f0842813729046ba9a1ec51fb5273f720649",
      "6d17bebcb9da92d289d23d460993265e4ec3f4e2"
    ],
    "commit_check": "1",
    "modified_files": [
      "openhands/agenthub/codeact_agent/function_calling.py",
      "openhands/agenthub/codeact_agent/tools/bash.py"
    ],
    "added_paths": []
  },
  {
    "id": 2769140146,
    "number": 6048,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/6048",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/6050",
    "type": "issue",
    "labels": "enhancement,fix-me",
    "created_date": "2025-01-05 06:38:51",
    "updated_date": "2025-01-09 02:39:55",
    "resolved_date": "2025-01-09 02:39:55",
    "title": "Update documentation of recommended models and add deepseek",
    "body": "**What problem or use case are you trying to solve?**\n\nWe have good results with deepseek, and it's quickly becoming a community preferred model.\n\nWe should:\n\n1. Update the documentation regarding preferred models based on @xingyaoww 's [benchmarking results](https://docs.google.com/spreadsheets/d/1wOUdFCMyY6Nt0AIqF705KN4JKOWgeI4wUGUP60krXXs/edit?gid=0#gid=0):\n\n<img width=\"971\" alt=\"Screenshot 2025-01-05 at 3 34 00‚ÄØPM\" src=\"https://github.com/user-attachments/assets/c3f36aae-c11e-4243-9cfc-e224dd961021\" />\n\nThis is the most recommended model: \n* anthropic/claude-3-5-sonnet-20241022\t41.67%\n\nThe following models also can achieve acceptable performance\n* anthropic/claude-3-5-haiku-20241022\t28.67%\n* deepseek/deepseek-chat\t23.00%\n* gpt-4o\t18.67%\n\nWe can also add a link to this spreadsheet (to replace the link to the older blog post that is currently in the doc).\n\n2. Make sure that all of these are added by default in the model selector in the frontend.",
    "state": "closed",
    "comments": 2,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/6048/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/6048/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/6048/events",
    "user_login": "neubig",
    "user_url": "https://github.com/neubig",
    "assignees": "neubig",
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 6050,
    "pr_source": "search_api",
    "commits": [
      "f82ae33c7625d80a344d02f5139f19300681a0ec",
      "3160ef431d996d18376206b690e94c79dba39a0b"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/utils/verified-models.ts"
    ],
    "added_paths": []
  },
  {
    "id": 2762104551,
    "number": 5894,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/5894",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/5926",
    "type": "issue",
    "labels": "enhancement,fix-me",
    "created_date": "2024-12-29 04:49:19",
    "updated_date": "2024-12-30 22:40:08",
    "resolved_date": "2024-12-30 22:40:08",
    "title": "Make it possible to collapse the right-hand side of the openhands screen",
    "body": "**What problem or use case are you trying to solve?**\n\nCurrently, OpenHands has two major components, the chat window on the left, and the workspace, terminal, etc. on the right.\n<img width=\"1314\" alt=\"Screenshot 2024-12-28 at 11 43 27‚ÄØPM\" src=\"https://github.com/user-attachments/assets/df50dddc-a386-4fa8-aade-90d9b00ef43b\" />\n\n**Describe the UX of the solution you'd like**\n\nIt would be nice to allow the chat component to take the entire screen, as it would allow for better viewing of generated code, changed files, etc. with your entire screen space.\n\n**Do you have thoughts on the technical implementation?**\n\nThis can be implemented as a collapse/expand button, similar to this one from overleaf (but obviously, instead of saying \"PDF\" it'd say something like \"workspace/terminal\":\n\n<img width=\"191\" alt=\"Screenshot 2024-12-28 at 11 48 13‚ÄØPM\" src=\"https://github.com/user-attachments/assets/4d9bcc17-2ebf-4a07-8674-b4cdac5c1f7c\" />\n\n<img width=\"181\" alt=\"Screenshot 2024-12-28 at 11 48 38‚ÄØPM\" src=\"https://github.com/user-attachments/assets/b05f22f3-d8da-4cbd-babf-38bf21631328\" />\n\n\n\n",
    "state": "closed",
    "comments": 2,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5894/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5894/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5894/events",
    "user_login": "neubig",
    "user_url": "https://github.com/neubig",
    "assignees": "neubig",
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 3,
    "comment_image_count": 0,
    "total_image_count": 3,
    "pr_number": 5926,
    "pr_source": "search_api",
    "commits": [
      "cab84b5b4c7bf6b1e6c2951e13e9dfe8f2709c10",
      "db60b5e052a1263fef57fce5b6b383399b5c9d92",
      "15bf0eb34b9619b40cbdd15902614c68f293570d",
      "5752d21ec4719fec27119c97e2582b01d19ebc1a",
      "957f97e6c4e2e4e1c5724ca288f1ea11ea9de690",
      "505e8e0cc5b18764ea60cb057945b2037847f20c"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/routes/_oh.app/route.tsx"
    ],
    "added_paths": [
      "frontend/src/components/layout",
      "frontend/src/icons",
      "frontend/src/utils"
    ]
  },
  {
    "id": 2759147890,
    "number": 5806,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/5806",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/5807",
    "type": "issue",
    "labels": "enhancement,fix-me",
    "created_date": "2024-12-26 00:54:11",
    "updated_date": "2024-12-30 11:40:07",
    "resolved_date": "2024-12-30 11:40:07",
    "title": "Tooltips for navbar",
    "body": "**What problem or use case are you trying to solve?**\n\nThe icons on the navbar on the left are not 100% self-explanatory.\n\n<img width=\"167\" alt=\"398408284-2eff9db9-c4e4-4b20-ad63-d26cbe3e3c7a\" src=\"https://github.com/user-attachments/assets/4180b88d-fe0f-40e3-ad84-c0ec7653ed0f\" />\n\n**Describe the UX of the solution you'd like**\n\nIt would be good to have tooltips where if you mouse-over a navbar item (other than the user icon) it tells you what the icon stands for.\n",
    "state": "closed",
    "comments": 2,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5806/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5806/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5806/events",
    "user_login": "neubig",
    "user_url": "https://github.com/neubig",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 5807,
    "pr_source": "search_api",
    "commits": [
      "3f904d462fc9c659b0bacc7ea987caff79d87e72",
      "000f2a58cbd89f790fb7fa424068ca815764b16e"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/components/features/sidebar/user-avatar.tsx",
      "frontend/src/components/shared/buttons/all-hands-logo-button.tsx",
      "frontend/src/components/shared/buttons/docs-button.tsx",
      "frontend/src/components/shared/buttons/exit-project-button.tsx",
      "frontend/src/components/shared/buttons/settings-button.tsx"
    ],
    "added_paths": [
      "frontend/src/components/shared/buttons"
    ]
  },
  {
    "id": 2680461427,
    "number": 5179,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/5179",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/5181",
    "type": "issue",
    "labels": "enhancement,fix-me",
    "created_date": "2024-11-21 18:32:42",
    "updated_date": "2024-11-25 15:59:15",
    "resolved_date": "2024-11-25 15:59:15",
    "title": "[frontend]: Push to Github button should only push branch, but not creating a PR",
    "body": "**What problem or use case are you trying to solve?**\n\nAfter clicking the \"push to github\" button, the frontend will automatically send a message asking the agent to push stuff to github AND create a PR.\n\n<img width=\"361\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a1414090-440b-4512-ac75-2c39a86a0d8d\">\n\n![image](https://github.com/user-attachments/assets/f15ead20-8bd0-495a-bfc6-36e10dc51443)\n\n**Describe the UX of the solution you'd like**\n\nWe should have two separate buttons for the functionality of \"push to remote branch\", AND, \"push & create a new PR\" - so we don't accidentally create new PR when not intended.\n\n**Do you have thoughts on the technical implementation?**\n\n**Describe alternatives you've considered**\n\n**Additional context**\n",
    "state": "closed",
    "comments": 4,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5179/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5179/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/5179/events",
    "user_login": "xingyaoww",
    "user_url": "https://github.com/xingyaoww",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 2,
    "comment_image_count": 0,
    "total_image_count": 2,
    "pr_number": 5181,
    "pr_source": "search_api",
    "commits": [
      "157883f66496fb6a0ab8ed57c629fca0e7f62c71",
      "f456410472905431989c3bd43b966131b08ede70",
      "59fc3afbad97467f360e55e458aa63f4b5ad94db",
      "b34722619aee81af27c6ff63580871e5b0bb67f0",
      "ede8a17607888d2dee6b9b6cf658735a500b4252",
      "7733d0ffd8200bb3e0991adb5a721ce903530e2a",
      "c3978b4551009f3855636f52c58265ce5768f9d1",
      "4a28111f157c43471053b532d0c15ed7327c72b9",
      "c612826b432a0fc63f9c7e41679bb32e764f476e",
      "dbb5ddf136fe2e31f5d4e8b73fd1394bd70fd0cd",
      "4df8b6fa5ef9708756308858101f91f782ab10c2"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/components/chat-interface.tsx",
      "frontend/src/components/suggestion-item.tsx",
      "openhands/agenthub/codeact_agent/codeact_agent.py",
      "openhands/events/action/message.py",
      "openhands/events/serialization/action.py",
      "openhands/resolver/patching/__init__.py",
      "openhands/resolver/patching/apply.py",
      "openhands/resolver/patching/exceptions.py",
      "openhands/resolver/patching/patch.py",
      "openhands/resolver/patching/snippets.py",
      "openhands/resolver/prompts/resolve/basic-with-tests.jinja",
      "openhands/resolver/prompts/resolve/basic.jinja",
      "openhands/runtime/utils/command.py"
    ],
    "added_paths": []
  },
  {
    "id": 2367896952,
    "number": 2590,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/2590",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/2848",
    "type": "issue",
    "labels": "enhancement,Stale",
    "created_date": "2024-06-22 16:30:38",
    "updated_date": "2024-08-08 02:11:38",
    "resolved_date": "2024-08-08 02:11:38",
    "title": "[Feature] Support vision inputs for LLM with vision capabilities",
    "body": "**What problem or use case are you trying to solve?**\n\nContext: https://opendevin.slack.com/archives/C06P5NCGSFP/p1719073107473339\n\nIt will be very helpful for the agent to actually \"see,\" especially if you ask the agent to develop a web page / frontend UI / game.\n\n**Describe the UX of the solution you'd like**\n\n\n- [ ] **Backend**: We should use litellm to enable vision model support (https://litellm.vercel.app/docs/completion/vision#checking-if-a-model-supports-vision) in the OpenAI API format where image can be represented as `base64` to pass into chat completion call. The chat `Event` (text-only now) needs to be modified to support passing images as \"base64\" to the backend: maybe each chat event can be an interleaved list of `[text, image_in_base64, text, ...]`.\n\n- [ ] **Frontend**: the user can upload images to the *chat* by (1) pasting, (2) clicking to upload, and/or (3) referring to files inside the workspace (e.g., @/workspace/screenshot.png -- this maybe too complicated and can leave to future). And once the image is added, we should show the thumbnail of the added images. The chat `Event` need to be modified to support passing images as \"base64\" to the backend.\n<img width=\"759\" alt=\"image\" src=\"https://github.com/OpenDevin/OpenDevin/assets/38853559/a8131a76-9968-486a-8b57-ee2b3f699a41\">\n\n\n**Do you have thoughts on the technical implementation?**\n\nLiteLLM already have vision model supports: \nhttps://litellm.vercel.app/docs/completion/vision#checking-if-a-model-supports-vision\n\nWe should throw out an error if user choose to use a model without vision support, yet uploaded an image.\n\n**Describe alternatives you've considered**\n\n**Additional context**\n",
    "state": "closed",
    "comments": 5,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/2590/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/2590/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/2590/events",
    "user_login": "xingyaoww",
    "user_url": "https://github.com/xingyaoww",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 2848,
    "pr_source": "search_api",
    "commits": [
      "1599b0c688f3a88d3b33eb392e55cc36cb59278f",
      "b3a044d762858319e6c9aafc4e6a3dee71a0e79a",
      "72bfc566053cb3cc5787de0ca1333e9141d714ad",
      "240e662535523c8055623ed895d166653d2629e5",
      "a5646a6304a21e7e6495a80f0fe3ad3fe60def68",
      "43475c214d30bf7804e88253100250089c41016c",
      "7196d490fa6c84dfa88b4e9b337123bafb39db7f",
      "eff68ef0f1b7fbe1f07c58a598ff5be862ae34ab",
      "cc8f2875ee9d387a1f4dd4eb13afce26adfecd5d",
      "d4e48082b1f1b4bd82b2f36906f8707bcdd62af2",
      "8484bb3f88375e77042ec85ba89ffec12d2e40f4",
      "1ab27fcef09bc5ba3f08188f78b4750ca8ca3c40",
      "fdf75bb02f5e1ff8ef3e646ce511ae6fd97a4321",
      "1167c6acb890bea39d049e5c8bb0932263da5beb",
      "a0c4e45e8fb369ff4e35f3f682b9ba7f085dc0e6",
      "0a48c7da14fc08cc38da9441a9cb4268ca07316e",
      "7a920ea97bd4d78623d81208b28e4075e488e34e",
      "a00e8363161e6ec51adfa7ef420aec2e9ba247d0",
      "0a564de07fdffe6398e1ee24f0e4c64d9d7ca53e",
      "3350b7a767ba43b7df3ccdef3411bcd55d5789b3",
      "da0c35be85a666d166b49f651a55b69b1a1b53b9",
      "4be5b27b2ece3424f5465cfb16a43bc2e13a8fda",
      "af9d444cba551b10f58fd1e760278eebe2df80a2",
      "46711b568dc0d98b3f22a1e29d4c0dfa731036ff",
      "7e5c5e8ac482fb70a0ebd887796f77ab98484b0d",
      "62048de18e21684d32a29909cb9e66483ff2425b",
      "0cc15e72181403b7c0ca61ee620c885f31c7d4d1",
      "63b3a1585face83a53e05a12a601bdcea98a4b91",
      "d36946dc7647e814ee6fc42adfc0e0bf10de0f2f",
      "8519616fd79b6572e374651322fbea2c439a4052",
      "398315139e9501dceff83e7db04e4fd835d15c5c"
    ],
    "commit_check": "",
    "modified_files": [
      "agenthub/browsing_agent/browsing_agent.py",
      "agenthub/browsing_agent/prompt.py",
      "agenthub/browsing_agent/response_parser.py",
      "agenthub/browsing_agent/utils.py",
      "agenthub/codeact_agent/action_parser.py",
      "agenthub/codeact_agent/codeact_agent.py",
      "agenthub/codeact_swe_agent/action_parser.py",
      "agenthub/codeact_swe_agent/codeact_swe_agent.py",
      "agenthub/codeact_swe_agent/response_parser.py",
      "agenthub/delegator_agent/agent.py",
      "agenthub/dummy_agent/agent.py",
      "agenthub/micro/agent.py",
      "agenthub/monologue_agent/agent.py",
      "agenthub/monologue_agent/response_parser.py",
      "agenthub/monologue_agent/utils/prompts.py",
      "agenthub/planner_agent/agent.py",
      "agenthub/planner_agent/prompt.py",
      "evaluation/EDA/run_infer.py",
      "evaluation/biocoder/run_infer.py",
      "evaluation/bird/run_infer.py",
      "evaluation/gaia/scorer.py",
      "evaluation/gorilla/utils.py",
      "evaluation/gpqa/run_infer.py",
      "evaluation/humanevalfix/run_infer.py",
      "evaluation/mint/tasks/codegen.py",
      "evaluation/mint/utils.py",
      "evaluation/ml_bench/run_infer.py",
      "evaluation/swe_bench/run_infer.py",
      "evaluation/swe_bench/scripts/summarise_results.py",
      "evaluation/swe_bench/swe_env_box.py",
      "frontend/src/components/Browser.test.tsx",
      "frontend/src/components/chat/Chat.test.tsx",
      "frontend/src/components/chat/ChatInput.test.tsx",
      "frontend/src/components/chat/ChatInput.tsx",
      "frontend/src/components/chat/ChatInterface.test.tsx",
      "frontend/src/components/chat/ChatInterface.tsx",
      "frontend/src/components/chat/ChatMessage.test.tsx",
      "frontend/src/components/chat/ChatMessage.tsx",
      "frontend/src/components/chat/message.d.ts",
      "frontend/src/components/file-explorer/ExplorerTree.test.tsx",
      "frontend/src/components/file-explorer/FileExplorer.test.tsx",
      "frontend/src/components/file-explorer/TreeNode.test.tsx",
      "frontend/src/components/terminal/Terminal.test.tsx",
      "frontend/src/hooks/useTyping.test.ts",
      "frontend/src/hooks/useTyping.ts",
      "frontend/src/index.tsx",
      "frontend/src/services/actions.ts",
      "frontend/src/services/auth.test.ts",
      "frontend/src/services/chatService.ts",
      "frontend/src/services/session.test.ts",
      "frontend/src/state/chatSlice.ts",
      "frontend/src/types/ActionType.tsx",
      "frontend/src/types/ObservationType.tsx",
      "opendevin/controller/action_parser.py",
      "opendevin/controller/agent.py",
      "opendevin/controller/agent_controller.py",
      "opendevin/controller/state/state.py",
      "opendevin/core/config.py",
      "opendevin/core/logger.py",
      "opendevin/core/main.py",
      "opendevin/core/metrics.py",
      "opendevin/core/schema/action.py",
      "opendevin/core/schema/observation.py",
      "opendevin/core/utils/json.py",
      "opendevin/events/action/__init__.py",
      "opendevin/events/action/agent.py",
      "opendevin/events/action/files.py",
      "opendevin/events/action/message.py",
      "opendevin/events/observation/__init__.py",
      "opendevin/events/observation/agent.py",
      "opendevin/events/observation/browse.py",
      "opendevin/events/observation/commands.py",
      "opendevin/events/observation/delegate.py",
      "opendevin/events/observation/empty.py",
      "opendevin/events/observation/error.py",
      "opendevin/events/observation/files.py",
      "opendevin/events/observation/recall.py",
      "opendevin/events/observation/reject.py",
      "opendevin/events/observation/success.py",
      "opendevin/events/serialization/action.py",
      "opendevin/events/serialization/event.py",
      "opendevin/events/serialization/observation.py",
      "opendevin/events/serialization/utils.py",
      "opendevin/events/stream.py",
      "opendevin/llm/bedrock.py",
      "opendevin/llm/llm.py",
      "opendevin/memory/condenser.py",
      "opendevin/memory/history.py",
      "opendevin/memory/memory.py",
      "opendevin/runtime/browser/__init__.py",
      "opendevin/runtime/browser/browser_env.py",
      "opendevin/runtime/client/client.py",
      "opendevin/runtime/client/runtime.py",
      "opendevin/runtime/docker/local_box.py",
      "opendevin/runtime/docker/ssh_box.py",
      "opendevin/runtime/e2b/sandbox.py",
      "opendevin/runtime/plugins/agent_skills/agentskills.py",
      "opendevin/runtime/plugins/jupyter/execute_server.py",
      "opendevin/runtime/plugins/mixin.py",
      "opendevin/runtime/runtime.py",
      "opendevin/runtime/sandbox.py",
      "opendevin/runtime/server/files.py",
      "opendevin/runtime/server/runtime.py",
      "opendevin/runtime/utils/image_agnostic.py",
      "opendevin/runtime/utils/source.py",
      "opendevin/server/auth/auth.py",
      "opendevin/server/listen.py",
      "opendevin/server/session/agent.py",
      "opendevin/server/session/session.py"
    ],
    "added_paths": [
      "evaluation/browsing_delegation",
      "evaluation/swe_bench/scripts/setup",
      "frontend/src/components/chat",
      "opendevin/core",
      "opendevin/runtime/utils"
    ]
  },
  {
    "id": 2304817610,
    "number": 1907,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/1907",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/1909",
    "type": "issue",
    "labels": "enhancement,good first issue",
    "created_date": "2024-05-19 22:56:08",
    "updated_date": "2024-05-20 07:15:12",
    "resolved_date": "2024-05-20 07:15:12",
    "title": "Better in-line code styling for messages",
    "body": "**What problem or use case are you trying to solve?**\nWe're currently rendering `inline code` in a way that isn't super distinguishable from other text\n\n**Describe the UX of the solution you'd like**\nSomething closer to what `github does`\n<img width=\"415\" alt=\"Screenshot 2024-05-19 at 6 55 09‚ÄØPM\" src=\"https://github.com/OpenDevin/OpenDevin/assets/7611973/3a85d21c-e117-47e6-a361-394bce891e5e\">\n\n\n**Do you have thoughts on the technical implementation?**\nCSS",
    "state": "closed",
    "comments": 1,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1907/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1907/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1907/events",
    "user_login": "rbren",
    "user_url": "https://github.com/rbren",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 1909,
    "pr_source": "manual",
    "commits": [
      "b1258e047ff10c9b8e11ab74ee77241dad66ffb0",
      "9339eaee980e76932c3e743022e32f34cc0c3120"
    ],
    "commit_check": "",
    "modified_files": [
      "frontend/src/components/chat/ChatMessage.tsx",
      "frontend/src/components/markdown/code.tsx",
      "frontend/src/index.css"
    ],
    "added_paths": []
  },
  {
    "id": 2279446061,
    "number": 1590,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/1590",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/2619",
    "type": "issue",
    "labels": "enhancement,good first issue",
    "created_date": "2024-05-05 10:07:18",
    "updated_date": "2024-06-25 06:15:45",
    "resolved_date": "2024-06-25 06:15:45",
    "title": "[Feature]: Add Copy Button to Each Message in Chat Interface",
    "body": "**What problem or use case are you trying to solve?**\nUsers need a quick and easy way to copy text from messages in the chat interface to use elsewhere. This feature will enhance user productivity and improve the overall user experience by facilitating easier sharing and documentation of information exchanged in chat.\n\n**Describe the UX of the solution you'd like**\nI propose adding a **\"Copy\"** button at the **top** or **bottom** of each message within the chat interface. This button should be clearly visible and accessible, ideally represented by a clipboard icon.\n\n**Do you have thoughts on the technical implementation?**\nThe implementation can involve adding an event listener to each copy button that triggers a copy-to-clipboard function when clicked.\n\n**Describe alternatives you've considered**\nI don't know about alternatives\n\n**Additional context**\nThis feature is aimed at enhancing user interaction efficiency within the chat application.\n<img width=\"1355\" alt=\"copy_button\" src=\"https://github.com/OpenDevin/OpenDevin/assets/5805397/4a0e40ed-d81f-4807-842c-d2e385e786ee\">\n\n\n",
    "state": "closed",
    "comments": 7,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1590/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1590/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1590/events",
    "user_login": "isavita",
    "user_url": "https://github.com/isavita",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 2619,
    "pr_source": "search_api",
    "commits": [
      "5b3d23b9ad1c3d3e9d3b5f4e3df94698ddb086c5",
      "42332fc8088579148afca573f4f96b9a9e93f859"
    ],
    "commit_check": "",
    "modified_files": [
      "frontend/src/components/chat/ChatMessage.tsx"
    ],
    "added_paths": []
  },
  {
    "id": 2273668215,
    "number": 1491,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/1491",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/4898",
    "type": "issue",
    "labels": "enhancement,good first issue,Stale",
    "created_date": "2024-05-01 15:06:15",
    "updated_date": "2024-12-01 02:30:03",
    "resolved_date": "2024-12-01 02:30:03",
    "title": "frontend: Support displaying images/videos/pdfs in the workspace",
    "body": "**What problem or use case are you trying to solve?**\n\nImages are not properly rendered in the Code Editor (though maybe it is not supposed to do that... -- I'm open to discussion about this).\n\n<img width=\"597\" alt=\"image\" src=\"https://github.com/OpenDevin/OpenDevin/assets/38853559/e41ab643-bd23-41d4-aeee-ae818dd31a95\">\n\n**Describe the UX of the solution you'd like**\n\nI kind of expect a VSCode-like experience that it can display some simple media file (jpg, png, or even mp4 and pdf) and show an error message when it encounters a binary file type (e.g., `.exe`) that it does not support.\n\n**Do you have thoughts on the technical implementation?**\n\n**Describe alternatives you've considered**\n\n**Additional context**\n",
    "state": "closed",
    "comments": 11,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1491/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1491/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1491/events",
    "user_login": "xingyaoww",
    "user_url": "https://github.com/xingyaoww",
    "assignees": "itzpa1,JanumalaAkhilendra,amanape",
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 4898,
    "pr_source": "search_api",
    "commits": [
      "1dae3042b60247f9ebb85e2277deafa3a7c6a70e",
      "d2dae0be1bbc49e2dcf7c250263c63c5ee643955",
      "973ce0f2a1b83e78a4bffa56aa05addfffb0694a",
      "d56f4a26b64f0b0ca3c16eada492cc0bfd3e433a"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/routes/_oh.app._index/code-editor-component.tsx",
      "openhands/runtime/action_execution_server.py",
      "openhands/runtime/utils/files.py"
    ],
    "added_paths": []
  },
  {
    "id": 2273450383,
    "number": 1487,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/1487",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/1508",
    "type": "issue",
    "labels": "enhancement,good first issue",
    "created_date": "2024-05-01 12:46:36",
    "updated_date": "2024-05-14 06:37:51",
    "resolved_date": "2024-05-10 10:43:28",
    "title": "frontend: Add [continue] and [finish] button for user to click when agent is awaiting user input",
    "body": "**What problem or use case are you trying to solve?**\n\nNow that https://github.com/OpenDevin/OpenDevin/pull/1290 is merged that supports awaiting user input, the agent may ask the user for confirmation (e.g., i propose we do X, Y, Z, do you agree?). It is a bit hassle for user to manually type in \"continue\" and send it to the agent.\n\n**Describe the UX of the solution you'd like**\n\nAdd two buttons when the agent is awaiting user input:\n- **continue**: sends a message \"continue\" to the agent\n- **finish**: end the current task and starts a new one.\n\nIt will look smth like this:\n![image](https://github.com/OpenDevin/OpenDevin/assets/38853559/ee61d01c-00f3-4f38-8e44-a613cdd229c4)\n\n\n**Do you have thoughts on the technical implementation?**\n\n**Describe alternatives you've considered**\n\n**Additional context**\n\nYou can start work on this by using `CodeActAgent`, asking it \"Can you print hello world first, then plot a figure of equation (y=x, x=0,1,2,3,4) using matplotlib?\".\n\nDemo video:\n\nhttps://github.com/OpenDevin/OpenDevin/assets/38853559/745733b3-788f-4d44-b0b0-3454fbe4f1fe\n",
    "state": "closed",
    "comments": 3,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1487/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1487/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1487/events",
    "user_login": "xingyaoww",
    "user_url": "https://github.com/xingyaoww",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 1,
    "total_image_count": 2,
    "pr_number": 1508,
    "pr_source": "search_api",
    "commits": [
      "5e9aee1990481ccb0d85df9b7bce1c2b3f952b88",
      "0fab77985e1a7c3fbe5e42d0db9fb77baab41f80",
      "3799ee43c220866def493a782e36bb6f4565244a",
      "1d64351f7a4d2a87d3245acabc0047b3502c96a0",
      "3656d52717c509fd4cc1ec0b883be697bfa2dbee",
      "feb0b7e65a226b665272691f02506bece81a37c3",
      "99522bb797f7cf8201200cdd22a90f949f15f23d"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/components/chat/ChatInput.test.tsx",
      "frontend/src/components/chat/ChatInput.tsx",
      "frontend/src/components/chat/ChatInterface.tsx"
    ],
    "added_paths": [
      "frontend/src/components"
    ]
  },
  {
    "id": 2265179791,
    "number": 1378,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/1378",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/1391",
    "type": "issue",
    "labels": "enhancement",
    "created_date": "2024-04-26 07:51:43",
    "updated_date": "2024-04-26 18:05:19",
    "resolved_date": "2024-04-26 18:05:18",
    "title": "Render frontend chat as markdown",
    "body": "**What problem or use case are you trying to solve?**\n\nWhen the LLM agent outputs markdown responses to the user, it is not rendered properly:\n\n![image](https://github.com/OpenDevin/OpenDevin/assets/38853559/e3b4ca07-cd6e-4b68-85e5-9718d238a8ed)\n\n<img width=\"720\" alt=\"image\" src=\"https://github.com/OpenDevin/OpenDevin/assets/38853559/6fb826e8-767c-4790-be7e-2f09e177a1d2\">\n\n**Describe the UX of the solution you'd like**\n\nRender agent's response (thoughts) as markdown so it gets properly rendered.\n\n**Do you have thoughts on the technical implementation?**\n\n**Describe alternatives you've considered**\n\n**Additional context**\n",
    "state": "closed",
    "comments": 1,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1378/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1378/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/1378/events",
    "user_login": "xingyaoww",
    "user_url": "https://github.com/xingyaoww",
    "assignees": NaN,
    "milestone_title": "2024-04",
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 2,
    "comment_image_count": 0,
    "total_image_count": 2,
    "pr_number": 1391,
    "pr_source": "search_api",
    "commits": [
      "25b6eb1f54bc80aac4767940ccd02d165362c7bf"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/components/ChatInterface.tsx",
      "frontend/tailwind.config.js"
    ],
    "added_paths": []
  },
  {
    "id": 2214967414,
    "number": 332,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/332",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/501",
    "type": "issue",
    "labels": "enhancement",
    "created_date": "2024-03-29 09:05:05",
    "updated_date": "2024-04-01 17:12:36",
    "resolved_date": "2024-04-01 17:12:36",
    "title": "Implement rate-limit backoff",
    "body": "**What problem or use case are you trying to solve?**\n\n**Describe the UX of the solution you'd like**\nshould control the request\n**Do you have thoughts on the technical implementation?**\n\n**Describe alternatives you've considered**\n\n**Additional context**\n<img width=\"939\" alt=\"image\" src=\"https://github.com/OpenDevin/OpenDevin/assets/4476322/4630e1cd-7fb0-479b-bc76-493678d740af\">",
    "state": "closed",
    "comments": 5,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/332/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/332/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/332/events",
    "user_login": "bravekingzhang",
    "user_url": "https://github.com/bravekingzhang",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 2,
    "total_image_count": 3,
    "pr_number": 501,
    "pr_source": "manual",
    "commits": [
      "f6a091b906a35fba0355a60353bbe29e196f2469"
    ],
    "commit_check": "1",
    "modified_files": [
      "opendevin/llm/llm.py"
    ],
    "added_paths": []
  },
  {
    "id": 2208745749,
    "number": 208,
    "html_url": "https://github.com/All-Hands-AI/OpenHands/issues/208",
    "pr_url": "https://github.com/All-Hands-AI/OpenHands/pull/271",
    "type": "issue",
    "labels": "enhancement",
    "created_date": "2024-03-26 16:32:30",
    "updated_date": "2024-03-28 01:09:23",
    "resolved_date": "2024-03-28 01:09:23",
    "title": "Add `model` and `agent` selectors to frontend",
    "body": "**What problem or use case are you trying to solve?**\nLet the user choose which model and agent they want to use\n\n**Describe the UX of the solution you'd like**\nI'm imagining a toolbar across the top of the chat section, where you can pick a model and an agent\n\n**Do you have thoughts on the technical implementation?**\n* Agent can be hard-coded to LangchainsAgent and CodeactAgent for now (bonus points for an API that exposes them)\n* Model should be taken from https://docs.litellm.ai/docs/providers (is there a way to expose the list via an API in python?)\n  * maybe hard-code a list of popular models if this is hard\n* prompt for an API key when model changes\n* Save settings in localstorage\n  * one API key per model\n\nWhen either option changes, we should send an `initialize` action on the websocket to re-initialize the agent.\n\n<img width=\"957\" alt=\"Screenshot 2024-03-26 at 12 29 11‚ÄØPM\" src=\"https://github.com/OpenDevin/OpenDevin/assets/7611973/107fcee6-1e21-48c0-8df1-56c1820e0023\">\n",
    "state": "closed",
    "comments": 1,
    "state_reason": "completed",
    "repository_url": "https://api.github.com/repos/All-Hands-AI/OpenHands",
    "labels_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/208/labels{/name}",
    "comments_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/208/comments",
    "events_url": "https://api.github.com/repos/All-Hands-AI/OpenHands/issues/208/events",
    "user_login": "rbren",
    "user_url": "https://github.com/rbren",
    "assignees": NaN,
    "milestone_title": NaN,
    "milestone_description": NaN,
    "pull_request_url": NaN,
    "body_image_count": 1,
    "comment_image_count": 0,
    "total_image_count": 1,
    "pr_number": 271,
    "pr_source": "manual",
    "commits": [
      "5f85d82ea84a2a499d88daaea9a70ec5a497114d",
      "254d740df4fccaf70998d946ab715360c38c971e"
    ],
    "commit_check": "1",
    "modified_files": [
      "frontend/src/App.tsx",
      "opendevin/server/session.py"
    ],
    "added_paths": [
      "frontend/src/components",
      "frontend/src/services"
    ]
  }
]